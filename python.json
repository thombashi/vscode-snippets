{
    "shebang_symbol": {
        "prefix": [
            "#!",
            "shebang"
        ],
        "body": [
            "#!/usr/bin/env python3",
            ""
        ]
    },
    "codeauthor": {
        "prefix": [
            "author",
            "codeauthor"
        ],
        "body": [
            ".. codeauthor:: Tsuyoshi Hombashi <tsuyoshi.hombashi@gmail.com>"
        ]
    },
    "header": {
        "prefix": "header",
        "body": [],
        "description": "Header template for a Python script."
    },
    "typing: import": {
        "prefix": "typings",
        "body": [
            "from typing import Mapping, Dict, List, Optional, Sequence, Tuple, Union, cast"
        ],
        "description": "frequent use typing imports."
    },
    "typing: Optional": {
        "prefix": "opt",
        "body": [
            "Optional[${type}]"
        ],
        "description": "type annotation definition of Optional"
    },
    "typing: Union": {
        "prefix": "uni",
        "body": [
            "Union[${types}]"
        ],
        "description": "type annotation definition of Union"
    },
    "class": {
        "prefix": "class init",
        "body": [
            "class ${class_name}:",
            "",
            "    def __init__(self) -> None:",
            "        pass",
            ""
        ],
        "description": "Class template"
    },
    "property: getter": {
        "prefix": [
            "getter"
        ],
        "body": [
            "@property",
            "def ${name}(self) -> Any:",
            "    return self.__${name}"
        ],
        "description": "getter template for a Python class."
    },
    "property: setter": {
        "prefix": "setter",
        "body": [
            "@${name}.setter",
            "def ${name}(self, x) -> None:",
            "    self.__${name} = x"
        ],
        "description": "setter template for a Python class."
    },
    "property: getter-setter": {
        "prefix": "property",
        "body": [
            "@property",
            "def ${name}(self) -> Any:",
            "    return self.__${name}",
            "",
            "@${name}.setter",
            "def ${name}(self, value) -> None:",
            "    self.__${name} = value"
        ],
        "description": "getter and setter template for a Python class."
    },
    "collections.namedtuple": {
        "prefix": "namedtuple",
        "body": [
            "${tuple_name} = namedtuple('${tuple_name}', '${attr0} ${attr1}')",
        ],
        "description": "collections.namedtuple template."
    },
    "stderr": {
        "prefix": "stderr",
        "body": [
            "print(\"\", file=sys.stderr)"
        ],
        "description": "print to stderr."
    },
    "main": {
        "prefix": "main",
        "body": [
            "import sys",
            "",
            "",
            "def main() -> int:",
            "    return 0",
            "",
            "",
            "if __name__ == '__main__':",
            "    sys.exit(main())",
            ""
        ],
        "description": "Main function template for a Python script."
    }
}